#!/usr/bin/env python3

# Copyright Â© Los Alamos National Security, LLC, and others.

# Print a makefile on stdout to build time series files from the pagecount
# files in the given directory.

import quacpath

from collections import defaultdict
import datetime
import glob
import sys

from dateutil.relativedelta import relativedelta

import wikimedia


PC_ROOT = sys.argv[1]
print('# pagecount root=%s' % PC_ROOT)

files = glob.glob(PC_ROOT + '/*/*/pagecounts-*.gz')
print('# found %d files' % len(files))

deps = defaultdict(set)
for file_ in files:
   ts = wikimedia.timestamp_parse(file_).replace(day=1, hour=0, second=0,
                                                 microsecond=0)
   deps[ts].add(file_)

for (ts, files) in deps.items():
   month = ts.strftime('%Y%m')
   dbfile = ts.strftime('%Y-%m-01.db')
   next_month = (ts + relativedelta(months=1)).strftime('%Y%m')
   # We want to prune the month file if we do not expect to modify it again.
   # The heuristic: if the last hour in the month is in the prerequisites, we
   # assume the month is "closed". To determine this, we take advantage of the
   # quirky timestamp scheme of the pagecount files: the last file in the
   # month will have a timestamp falling in the first few seconds of the
   # following month, and this will be the only file in that month. Thus, we
   # use a simple text search to see if that file is present.
   if (any((next_month in i) for i in files)):
      prune = '--prune'
      target = 'tsfiles-complete'
   else:
      prune = ''
      target = 'tsfiles-incomplete'
   print()
   print('# %s, this month=%s, next month=%s' % (ts, month, next_month))
   print('%s: ts/%s' % (target, dbfile))
   print('ts/%s: %s' % (dbfile, ' '.join(sorted(files))))
   # $? is all newer prerequisites
   print('\t@echo wp-tsupdate %s on $(words $?) files for %s ...'
         % (prune, dbfile))
   # command printing suppressed because it is so huge
   print('\t@wp-tsupdate %s --verbose ts $?' % prune)

