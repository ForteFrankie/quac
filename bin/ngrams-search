#!/usr/bin/env python

'Print ngrams-build results.'

# Copyright (c) 2012-2013 Los Alamos National Security, LLC, and others.

from __future__ import division

import io
import sys

import numpy as np

import quacpath
import qr.base
import testable
import time_
import tsv_glue
import u
l = u.l


ap = u.ArgumentParser(description=__doc__)
gr = ap.default_group
gr.add_argument('--detail',
                action='store_true',
                help='print TSV of time series in addition to metadata')
gr.add_argument('--query',
                metavar='NGRAM',
                help='print this n-gram (otherwise print all)')
gr.add_argument('inputdir',
                metavar='INPUTDIR',
                help='quacreduce output directory from ngrams-build')


### Main ###

def main():
   try:
      file_ct = u.glob_maxnumeric(args.inputdir) + 1
   except TypeError:
      u.abort('no input files in %s' % (args.inputdir))
   try:
      totals = u.pickle_load('%s/total.pkl.gz' % (args.inputdir))
   except Exception, x:
      u.abort('cannot read total file: %s' % (x))
   tot_vec = totals['series']
   dates = (time_.iso8601_date(date)
            for date in time_.dateseq(tot_vec.first_day, tot_vec.last_day))
   for i in xrange(file_ct):
      if (args.query is not None and u.djb2(args.query) % file_ct != i):
         continue
      fp = io.open('%s/%d' % (args.inputdir, i), 'rb')
      for line in fp:
         (k, _, v) = line.partition('\t')
         k = k.decode('utf8')
         v = qr.base.decode(v)
         ngram_vec = v['series']
         if (args.query is None or k == args.query):
            if (args.detail):
               tsv = tsv_glue.Writer(sys.stdout.fileno())
               (ngram_vec, _) = ngram_vec.bi_union(ngram_vec, tot_vec)
               assert (ngram_vec.bounds_eq(tot_vec))
               for row in zip(dates,
                              ngram_vec.astype(np.int64),
                              tot_vec.astype(np.int64),
                              ngram_vec / tot_vec * 1e6):
                 tsv.writerow(row)
            else:
               fd = time_.iso8601_date(ngram_vec.first_day)
               ld = time_.iso8601_date(ngram_vec.last_day)
               print >>u.utf8_stdout, (u'%s\t%d\t%s\t%s'
                                       % (k, v['total'], fd, ld))
            if (k == args.query):
               break


### Bootstrap ###

try:

   args = u.parse_args(ap)
   u.logging_init('ngsch')

   if (__name__ == '__main__'):
      main()

except testable.Unittests_Only_Exception:
   testable.register('')
