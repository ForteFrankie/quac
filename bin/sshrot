#!/usr/bin/env python3

'''\
Run a command on an intelligently-selected other host. If mpirun is available,
use that to invoke the command; otherwise, use ssh.'''

# Copyright (c) Los Alamos National Security, LLC, and others.

help_epilogue = '''
The rules for host selection are:

1. If $SLURM_NODELIST exists, use the hosts listed there. Otherwise, use the
   network name of the current host. (We don't use localhost because this can
   cause trouble on clusters with shared home directories.)

2. Round-robin rotation of jobs among those hosts.

Warnings/notes/quirks:

* sshrot doesn't do anything to limit the number of jobs on any given host.

* This script drops state files in /tmp. Because they are needed for
  subsequent invocations, and sshrot doesn't know how many of these there will
  be, some of the files must be cleaned up with --cleanup when you are done.

* If the state file names a host that is not in the node list, then we
  silently start over from the beginning of the host list.

* The remote command will be run in the current working directory. This means
  that the CWD must exist on the remote host.

* Options meant for the remote command may need to be protected from sshrot by
  placing them after "--" (e.g., "sshrot -- echo -a") or within a single
  command word (e.g., "sshrot 'echo -a'").'''

# N.B. lockf() is pretty horrible, as is the BSD flock() alternative, but they
# are good enough for here. See the man pages for the two C functions.

import fcntl
import io
import os
import platform
import subprocess
import sys

import hostlist

import quacpath
import testable
import u

CWDPROXY = os.getcwd().replace('/', '+')
# We put these in /tmp instead of TMPDIR to avoid "ControlPath too long". The
# limit seems quite short; 129 characters failed for me.
STATEFILE = '/tmp/%s+%s' % (CWDPROXY, 'sshrot.state')
SOCKFILE = '/tmp/%s+%s' % (CWDPROXY, 'sshsock.%h')
if (u.mpi_available_p()):
   MPI_MODE = True
   CMD_BASE = ['mpirun', '-x', 'PATH', '-np', '1', '-H']
else:
   MPI_MODE = False
   CMD_BASE = ['ssh', '-o', 'BatchMode=yes']


### Setup ###

ap = u.ArgumentParser(description=__doc__, epilog=help_epilogue)
gr = ap.default_group
gr.add_argument('-c',
                action='store_true',
                help='ignored (for compatibility with shells)')
gr.add_argument('-e',
                action='store_true',
                help='exit with error as soon as command component fails')
gr.add_argument('--cleanup',
                action='store_true',
                help='remove state files')
gr.add_argument('--info',
                action='store_true',
                help='print transport mechanism (ssh or mpi) and exit')
gr.add_argument('cmds',
                metavar='WORD',
                nargs='*',
                help='words of command line to run on remote host')


### Main ###

def main():

   try:
      nodes = hostlist.expand_hostlist(os.environ['SLURM_NODELIST'])
   except KeyError:
      nodes = [platform.node()]
   statef = io.open(STATEFILE, 'a+b')

   # Need exclusive access to the state file, so lock before proceeding. This
   # will block until we can have the lock. The lock is released either when
   # we exit (--muxstart and --muxstop) or explicitly release it.
   fcntl.lockf(statef.fileno(), fcntl.LOCK_EX)

   if (args.cleanup):
      os.unlink(STATEFILE)
   else:
      # read state
      try:
         statef.seek(0)
         lastnode = u.pickle_load(statef)
         curnode = nodes[(nodes.index(lastnode) + 1) % len(nodes)]
      except (EOFError, ValueError) as x:
         curnode = nodes[0]

      # write state
      statef.truncate(0)
      u.pickle_dump(statef, curnode)

      # we wrote the state we wanted, so release the lock
      statef.close()

      # build and run command
      cmd_args = args.cmds
      if (args.e):
         cmd_args = ['set', '-e', ';'] + cmd_args
      try:
         venv = os.environ['VIRTUAL_ENV']
         cmd_args = ['.', venv + '/bin/activate', ';'] + cmd_args
      except KeyError:
         pass
      if (MPI_MODE):
         # mpirun appears to invoke our command without use of the shell.
         # Therefore, we construct our own shell invocation. Also, mpirun will
         # do the cd for us.
         cmd_args = [curnode, 'sh', '-c', ' '.join(cmd_args)]
      else:
         # SSH appears to do its own packing of the command words into a shell
         # invocation. Therefore, we pass the words individually.
         cmd_args = [curnode, 'cd', os.getcwd(), ';'] + cmd_args
      os.execvp(CMD_BASE[0], CMD_BASE + cmd_args)


### Bootstrap ###

try:

   if (__name__ == '__main__'):
      args = u.parse_args(ap)

      if (args.info):
         if (MPI_MODE):
            print('MPI')
         else:
            print('SSH')
         sys.exit(0)

      main()

except testable.Unittests_Only_Exception:
   testable.register('')
