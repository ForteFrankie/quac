#!/usr/bin/env python

'Update local copy of the Wikimedia XML dumps to match the latest ones.'

# Copyright (c) 2012-2013 Los Alamos National Security, LLC, and others.

help_epilogue = '''
Logs only go to stdout, so as to capture the rsync chatter as well.

Note that we use rsync to download Wikipedia stuff, which isn't supported by
the Wikimedia site, so you have to use a mirror. See the list of mirrors:
<http://meta.wikimedia.org/wiki/Mirroring_Wikimedia_project_XML_dumps>

WARNING: If a new version of a dump is available, any old versions in the
location specified will be overwritten. (However, dumps removed from the
configuration will not be deleted.)
'''

import os.path

import quacpath
import rsync
import testable
import u

l = u.l
c = u.c


### Setup ###

ap = u.ArgumentParser(description=__doc__, epilog=help_epilogue)
gr = ap.add_argument_group('arguments')
gr.add_argument("--url",
                required=True,
                help="Wikimedia mirror URL to copy (must end in /)",
                metavar="URL")
gr.add_argument("--config",
                help="location of config file",
                default=u.CONFIG_DEFAULT,
                metavar="FILE")


### Main ###

def main():
   l.info('updating Wikimedia dumps in %s' % (dump_dir))
   l.info('bandwidth limit is %d KB/s' % (bwlimit))
   includes = list()
   for project in c.getlist('wkpd', 'projects'):
      for pattern in c.getlist('wkpd', 'dumps'):
         includes.append('/%s/latest/%s-latest-%s'
                         % (project, project, pattern))
   rsync.byinclude(args.url, dump_dir, bwlimit, includes, args.verbose)
   l.info('done')

### Bootstrap ###

try:

   args = u.parse_args(ap)
   u.configure(args.config)
   u.logging_init('wpacc')

   if (args.url[-1] != '/'):
      u.abort('URL must end in slash')
   if (len(c.getlist('wkpd', 'projects')) == 0):
      u.abort('no projects specified in config')
   if (len(c.getlist('wkpd', 'dumps')) == 0):
      u.abort('no dump file patterns specified in config')

   dump_dir = c.getpath('wkpd', 'dump_dir')
   bwlimit = c.getint('wkpd', 'bandwidth_limit')
   if (not os.path.isdir(dump_dir)):
      u.abort('%s is not a directory or does not exist' % (dump_dir))

   if (__name__ == '__main__'):
      main()

except testable.Unittests_Only_Exception:
   testable.register('')
