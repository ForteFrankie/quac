#!/usr/bin/env python

'''
Transform .all.tsv tweet files in a directory into a set of files containing
pickled n-gram time series with 1-day granularity.'''

# Copyright (c) 2012-2013 Los Alamos National Security, LLC, and others.

import os
import subprocess as sp

import quacpath
import qr.scripting
import u
l = u.l


help_epilogue = '''
Note that input should be .all.tsv files.
''' + qr.scripting.help_epilogue


ap = qr.scripting.ArgumentParser(description=__doc__, epilog=help_epilogue)
gr = ap.add_argument_group('n-gram stuff')
gr.add_argument('-n',
                type=int,
                metavar='N',
                default=2,
                help='n-gram size (default 2)')
gr.add_argument('--min-occur',
                type=int,
                metavar='N',
                default=10,
                help='drop n-grams rarer than this (default 10 occurrences)')
gr.add_argument('--run',
                type=int,
                help='run make with -j N after job setup')
gr.add_argument('--clean',
                action='store_true',
                help='run "make clean" after job completion')
gr.add_argument('outputdir',
                metavar='OUTPUTDIR',
                help='results and temporary job files (must exist)')


args = qr.scripting.parse_args(ap)
u.configure(None)
u.logging_init('ngbld')

l.info('starting')
os.chdir(args.outputdir)

# FIXME: these are lame hacks
args.python = 'qr.ngramtime.Tweet_Job'
args.pyargs = 'n:%d min_occur:%d' % (args.n, args.min_occur)

try:

   l.info('setting up job')
   qr.scripting.setup(args)
   if (args.run is not None):
      l.info('running job')
      qr.scripting.run(args, args.run)
      if (args.clean):
         l.info('cleaning up job')
         qr.scripting.clean(args)

   l.info('creating output links')
   for i in xrange(args.partitions):
      os.symlink('qrjob/out/%d' % (i), str(i))

   l.info('done')

except sp.CalledProcessError, x:
   u.abort('subprocess failed with return code %d' % (x.returncode))

