#!/usr/bin/env python

'''
Standard input is a text stream of key/value pairs separated by a single tab.
Split lines into several output files according to the hash value of the
keys.

This script is fairly slow, topping out at around 30MiB/s (issue #35).'''

import argparse
import cProfile
import io
import sys

import quacpath
import testable
import u


ap = u.ArgumentParser(description=__doc__)
gr = ap.default_group
gr.add_argument('n',
                type=int,
                metavar='N',
                help='split into N files')
gr.add_argument('basename',
                type=str,
                metavar='BASENAME',
                help='basename of output (dot and hash value are appended)')
gr.add_argument('--profile',
                action='store_true',
                help='profile for speed and dump results at the end')


def main():
   in_ = io.open(sys.stdin.fileno(), 'rb')
   out = [io.open('%s.%d' % (args.basename, i), 'wb') for i in xrange(args.n)]

   for line in in_:
      hv = hash(line.partition('\t')[0]) % args.n
      out[hv].write(line)


try:

   args = u.parse_args(ap)

   if (args.profile):
      prof = cProfile.Profile()
      prof.enable()

   main()

   if (args.profile):
      prof.disable()
      prof.dump_stats('profile.out')

except testable.Unittests_Only_Exception:
   testable.register('')
